// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ProThrift.h"
#include "nodo_fila.h"
#include <QString>
#include <QStringBuilder>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class ProThriftHandler : virtual public ProThriftIf {
 public:
    std::string arreglo[10];
    matriz * m1 = new matriz();
  ProThriftHandler() {
    // Your initialization goes here
      printf("Begn\n");
      arreglo[0]="Duglas";
      arreglo[1]="Majo";
      arreglo[2]="Mike";
      arreglo[3]="Daniel";
      arreglo[4]="Oscar";
      arreglo[5]="Fer";
      arreglo[6]="Mariela";
      arreglo[7]="Raquel";
      arreglo[8]="Yazmin";
      arreglo[9]="Ultimo";


      Nodo_dato* dato = new Nodo_dato(1,2,0,"agua");
      Nodo_dato* dato1 = new Nodo_dato(2,3,0,"agua");
      Nodo_dato* dato2 = new Nodo_dato(3,3,0,"agua");
      Nodo_dato* dato3= new Nodo_dato(2,2,0,"agua");
      Nodo_dato* dato4= new Nodo_dato(7,2,0,"agua");
      Nodo_dato* dato5= new Nodo_dato(0,0,0,"agua");
      Nodo_dato* dato6= new Nodo_dato(0,2,0,"agua");
      Nodo_dato* dato7= new Nodo_dato(0,1,0,"agua");

      m1->insertar_columna(dato,dato->pos_y);
      m1->insertar_columna(dato1,dato1->pos_y);
      m1->insertar_columna(dato2,dato2->pos_y);
      m1->insertar_columna(dato3,dato3->pos_y);
      m1->insertar_columna(dato4,dato4->pos_y);
      m1->insertar_columna(dato5,dato5->pos_y);
      m1->insertar_columna(dato6,dato6->pos_y);
      m1->insertar_columna(dato7,dato7->pos_y);

  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void obtener_posicion(std::string & _return, const int32_t pos) {
    // Your implementation goes here

      _return = m1->getDat(pos)->f().toUtf8().constData();
      
     
   //   _return = arreglo[pos];
    printf("obtener_posicion: %d \n",pos);
  }

  int32_t sumar(const int32_t uno, const int32_t dos) {
    // Your implementation goes here
    printf("sumar\n");
  }

};

#include "mainwindow.h"
#include <QApplication>


/*
int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ProThriftHandler> handler(new ProThriftHandler());
  shared_ptr<TProcessor> processor(new ProThriftProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();

  QApplication a(argc, argv);
  MainWindow w;
  w.show();

  return a.exec();

  return 0;
}
*/
